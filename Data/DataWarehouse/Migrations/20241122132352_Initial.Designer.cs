// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PadEbankETLService.Data.DataWarehouse;
using PadEbankETLService.Data.Transaction;

#nullable disable

namespace PadEbankETLService.Data.DataWarehouse.Migrations
{
    [DbContext(typeof(DataWarehouseDbContext))]
    [Migration("20241122132352_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "currency", new[] { "mdl", "usd", "eur" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "transaction_type", new[] { "deposit", "withdraw", "transfer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimCard", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("card_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE")
                        .HasColumnName("created_at");

                    b.Property<Currency>("Currency")
                        .HasColumnType("public.currency")
                        .HasColumnName("currency");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.HasKey("Code");

                    b.ToTable("dim_cards");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE")
                        .HasColumnName("created_at");

                    b.Property<Currency>("Currency")
                        .HasColumnType("public.currency")
                        .HasColumnName("currency");

                    b.Property<string>("DstCardCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dst_card_code");

                    b.Property<string>("SrcCardCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("src_card_code");

                    b.Property<TransactionType>("Type")
                        .HasColumnType("public.transaction_type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("dim_transactions");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimUser", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.HasKey("Email");

                    b.ToTable("dim_users");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.FactCardTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP WITHOUT TIME ZONE")
                        .HasColumnName("created_at");

                    b.Property<Currency>("Currency")
                        .HasColumnType("public.currency")
                        .HasColumnName("currency");

                    b.Property<string>("DstCardCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dst_card_code");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.HasKey("Id");

                    b.HasIndex("DstCardCode");

                    b.HasIndex("UserEmail");

                    b.ToTable("fact_card_transactions");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.FactCardTransaction", b =>
                {
                    b.HasOne("PadEbankETLService.Data.DataWarehouse.DimCard", "DimCard")
                        .WithMany("FactCardTransactions")
                        .HasForeignKey("DstCardCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PadEbankETLService.Data.DataWarehouse.DimTransaction", "DimTransaction")
                        .WithOne("FactCardTransaction")
                        .HasForeignKey("PadEbankETLService.Data.DataWarehouse.FactCardTransaction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PadEbankETLService.Data.DataWarehouse.DimUser", "DimUser")
                        .WithMany("FactCardTransactions")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimCard");

                    b.Navigation("DimTransaction");

                    b.Navigation("DimUser");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimCard", b =>
                {
                    b.Navigation("FactCardTransactions");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimTransaction", b =>
                {
                    b.Navigation("FactCardTransaction");
                });

            modelBuilder.Entity("PadEbankETLService.Data.DataWarehouse.DimUser", b =>
                {
                    b.Navigation("FactCardTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
